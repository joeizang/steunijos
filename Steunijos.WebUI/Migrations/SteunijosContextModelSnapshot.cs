// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Steunijos.WebUI.Data;

namespace Steunijos.WebUI.Migrations
{
    [DbContext(typeof(SteunijosContext))]
    partial class SteunijosContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(767)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(767)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(767)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PaperPaperAuthor", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("int");

                    b.Property<int>("PapersId")
                        .HasColumnType("int");

                    b.HasKey("AuthorsId", "PapersId");

                    b.HasIndex("PapersId");

                    b.ToTable("PaperPaperAuthor");
                });

            modelBuilder.Entity("Steunijos.Domain.DomainModels.AuthorsPapers", b =>
                {
                    b.Property<int>("PaperAuthorId")
                        .HasColumnType("int");

                    b.Property<int>("PaperId")
                        .HasColumnType("int");

                    b.HasKey("PaperAuthorId", "PaperId");

                    b.HasIndex("PaperId");

                    b.ToTable("AuthorsPapers");
                });

            modelBuilder.Entity("Steunijos.Domain.DomainModels.Editor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Designation")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("FacultyName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("UniversityName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.ToTable("Editors");
                });

            modelBuilder.Entity("Steunijos.Domain.DomainModels.Journal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActualPath")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTimeOffset?>("CopyrightYear")
                        .HasColumnType("timestamp");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("IssnNo")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<int>("JournalContentId")
                        .HasColumnType("int");

                    b.Property<string>("SavedPath")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("VolumeName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Journals");
                });

            modelBuilder.Entity("Steunijos.Domain.DomainModels.JournalContent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContentTitle")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<int>("JournalId")
                        .HasColumnType("int");

                    b.Property<int>("JournalPosition")
                        .HasColumnType("int");

                    b.Property<int>("PaperAuthorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("JournalId")
                        .IsUnique();

                    b.HasIndex("PaperAuthorId");

                    b.ToTable("JournalContents");
                });

            modelBuilder.Entity("Steunijos.Domain.DomainModels.Paper", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ActualPath")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<int>("JournalId")
                        .HasMaxLength(150)
                        .HasColumnType("int");

                    b.Property<string>("PaperOriginalName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("PaperTopic")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SavedPath")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("ThumbnailPath")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Title")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("JournalId");

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("Steunijos.Domain.DomainModels.PaperAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("DepartmentName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("Designation")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FacultyName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("IsValidAuthor")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UniversityName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.ToTable("PaperAuthors");
                });

            modelBuilder.Entity("Steunijos.Domain.DomainModels.PaperPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("decimal(12,2)");

                    b.Property<string>("AuthorName")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<int?>("PaperAuthorId")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset?>("PaymentDate")
                        .HasColumnType("timestamp");

                    b.Property<string>("TellerNumber")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("PaperAuthorId");

                    b.ToTable("PaperPayments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PaperPaperAuthor", b =>
                {
                    b.HasOne("Steunijos.Domain.DomainModels.PaperAuthor", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Steunijos.Domain.DomainModels.Paper", null)
                        .WithMany()
                        .HasForeignKey("PapersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Steunijos.Domain.DomainModels.AuthorsPapers", b =>
                {
                    b.HasOne("Steunijos.Domain.DomainModels.PaperAuthor", "PaperAuthor")
                        .WithMany("AuthorsPapers")
                        .HasForeignKey("PaperAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Steunijos.Domain.DomainModels.Paper", "Paper")
                        .WithMany("AuthorsPapers")
                        .HasForeignKey("PaperId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paper");

                    b.Navigation("PaperAuthor");
                });

            modelBuilder.Entity("Steunijos.Domain.DomainModels.JournalContent", b =>
                {
                    b.HasOne("Steunijos.Domain.DomainModels.Journal", "Journal")
                        .WithOne("TableOfContents")
                        .HasForeignKey("Steunijos.Domain.DomainModels.JournalContent", "JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Steunijos.Domain.DomainModels.PaperAuthor", "Author")
                        .WithMany()
                        .HasForeignKey("PaperAuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("Steunijos.Domain.DomainModels.Paper", b =>
                {
                    b.HasOne("Steunijos.Domain.DomainModels.Journal", "Journal")
                        .WithMany("Papers")
                        .HasForeignKey("JournalId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Journal");
                });

            modelBuilder.Entity("Steunijos.Domain.DomainModels.PaperPayment", b =>
                {
                    b.HasOne("Steunijos.Domain.DomainModels.PaperAuthor", null)
                        .WithMany("Payments")
                        .HasForeignKey("PaperAuthorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Steunijos.Domain.DomainModels.Journal", b =>
                {
                    b.Navigation("Papers");

                    b.Navigation("TableOfContents");
                });

            modelBuilder.Entity("Steunijos.Domain.DomainModels.Paper", b =>
                {
                    b.Navigation("AuthorsPapers");
                });

            modelBuilder.Entity("Steunijos.Domain.DomainModels.PaperAuthor", b =>
                {
                    b.Navigation("AuthorsPapers");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
