// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Steunijos.Web.Data;

namespace Steunijos.Web.Migrations
{
    [DbContext(typeof(SteunijosContext))]
    [Migration("20200304005333_SimplifiedSchema")]
    partial class SimplifiedSchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Steunijos.Web.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AffiliatedSchool")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsDepartmentMember")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsHOD")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("OtherNames")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("ProfilePhoto")
                        .HasColumnType("text");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("SpecialtyField")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Steunijos.Web.Models.Journal", b =>
                {
                    b.Property<string>("IssnNo")
                        .HasColumnType("text");

                    b.Property<string>("ActualPath")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CopyrightYear")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SavedPath")
                        .HasColumnType("text");

                    b.Property<string>("VolumeName")
                        .HasColumnType("text");

                    b.HasKey("IssnNo");

                    b.ToTable("Journals");
                });

            modelBuilder.Entity("Steunijos.Web.Models.JournalContent", b =>
                {
                    b.Property<string>("JournalContentId")
                        .HasColumnType("text");

                    b.Property<string>("AuthorId")
                        .HasColumnType("text");

                    b.Property<string>("ContentTitle")
                        .HasColumnType("text");

                    b.Property<string>("JournalIssnNo")
                        .HasColumnType("text");

                    b.Property<int>("JournalPosition")
                        .HasColumnType("integer");

                    b.HasKey("JournalContentId");

                    b.HasIndex("AuthorId");

                    b.HasIndex("JournalIssnNo");

                    b.ToTable("JournalContents");
                });

            modelBuilder.Entity("Steunijos.Web.Models.Paper", b =>
                {
                    b.Property<string>("PaperId")
                        .HasColumnType("text");

                    b.Property<string>("ActualPath")
                        .HasColumnType("text");

                    b.Property<string>("AuthorName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JournalId")
                        .HasColumnType("text");

                    b.Property<string>("PaperOriginalName")
                        .HasColumnType("text");

                    b.Property<string>("PaperTopic")
                        .HasColumnType("text");

                    b.Property<string>("SavedPath")
                        .HasColumnType("text");

                    b.Property<string>("SubjectAreaId")
                        .HasColumnType("text");

                    b.Property<string>("ThumbnailPath")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("PaperId");

                    b.HasIndex("SubjectAreaId");

                    b.ToTable("Papers");
                });

            modelBuilder.Entity("Steunijos.Web.Models.PaperPayment", b =>
                {
                    b.Property<string>("PaperPaymentId")
                        .HasColumnType("text");

                    b.Property<decimal>("AmountPaid")
                        .HasColumnType("numeric");

                    b.Property<string>("AuthorName")
                        .HasColumnType("text");

                    b.Property<string>("PaperAuthorId")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TellerNumber")
                        .HasColumnType("text");

                    b.HasKey("PaperPaymentId");

                    b.HasIndex("PaperAuthorId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Steunijos.Web.Models.SubjectArea", b =>
                {
                    b.Property<string>("SubjectAreaId")
                        .HasColumnType("text");

                    b.Property<string>("SubjectAreaName")
                        .HasColumnType("text");

                    b.HasKey("SubjectAreaId");

                    b.ToTable("SubjectArea");
                });

            modelBuilder.Entity("Steunijos.Web.Models.ApplicationRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.HasDiscriminator().HasValue("ApplicationRole");
                });

            modelBuilder.Entity("Steunijos.Web.Models.Editor", b =>
                {
                    b.HasBaseType("Steunijos.Web.Models.ApplicationUser");

                    b.Property<string>("DepartmentName")
                        .HasColumnType("text");

                    b.Property<string>("Designation")
                        .HasColumnType("text");

                    b.Property<string>("FacultyName")
                        .HasColumnType("text");

                    b.Property<string>("UniversityName")
                        .HasColumnType("text");

                    b.HasDiscriminator().HasValue("Editor");
                });

            modelBuilder.Entity("Steunijos.Web.Models.PaperAuthor", b =>
                {
                    b.HasBaseType("Steunijos.Web.Models.ApplicationUser");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DepartmentName")
                        .HasColumnName("PaperAuthor_DepartmentName")
                        .HasColumnType("text");

                    b.Property<string>("Designation")
                        .HasColumnName("PaperAuthor_Designation")
                        .HasColumnType("text");

                    b.Property<string>("FacultyName")
                        .HasColumnName("PaperAuthor_FacultyName")
                        .HasColumnType("text");

                    b.Property<bool>("IsValidAuthor")
                        .HasColumnType("boolean");

                    b.Property<string>("UniversityName")
                        .HasColumnName("PaperAuthor_UniversityName")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue("PaperAuthor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Steunijos.Web.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Steunijos.Web.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Steunijos.Web.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Steunijos.Web.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Steunijos.Web.Models.JournalContent", b =>
                {
                    b.HasOne("Steunijos.Web.Models.PaperAuthor", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("Steunijos.Web.Models.Journal", "Journal")
                        .WithMany()
                        .HasForeignKey("JournalIssnNo");
                });

            modelBuilder.Entity("Steunijos.Web.Models.Paper", b =>
                {
                    b.HasOne("Steunijos.Web.Models.SubjectArea", "SubjectArea")
                        .WithMany("Papers")
                        .HasForeignKey("SubjectAreaId");
                });

            modelBuilder.Entity("Steunijos.Web.Models.PaperPayment", b =>
                {
                    b.HasOne("Steunijos.Web.Models.PaperAuthor", null)
                        .WithMany("Payments")
                        .HasForeignKey("PaperAuthorId");
                });
#pragma warning restore 612, 618
        }
    }
}
